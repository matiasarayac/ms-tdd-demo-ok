# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master
- dev

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation, test
  dockerRegistryServiceConnection: 'c7f999b6-2aac-4492-873c-147dbf774c63'
  imageRepository: 'msdevopslabs'
  containerRegistry: 'matiasaraya.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Maven@3
      inputs:
        mavenPomFile: 'pom.xml'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        codeCoverageToolOption: 'JaCoCo'
        javaHomeOption: 'JDKVersion'
        mavenVersionOption: 'Default'
        mavenAuthenticateFeed: false
        effectivePomSkip: false
        sonarQubeRunAnalysis: false
    - task: CopyFiles@2
      displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(system.defaultworkingdirectory)'
        Contents: '**/*.jar'
        TargetFolder: '$(build.artifactstagingdirectory)'
    - task: UniversalPackages@0
      displayName: Universal Publish
      inputs:
        command: publish
        publishDirectory: '$(Build.ArtifactStagingDirectory)'
        vstsFeedPublish: 'DevOpsLabs/DevOpsLabsMaven'
        vstsFeedPackagePublish: '$(imageRepository)'
        packagePublishDescription: '$(imageRepository)'
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: $(tag)       
    - task: WhiteSource Bolt@20
      displayName: 'Run WhiteSource Bolt'
      condition: eq(variables['Build.SourceBranchName'], 'master')          

- stage: Deploy
  displayName: Deploy the web application
  dependsOn: Build
  condition: |
    and 
    (
      succeeded(),        
      eq(variables['Build.SourceBranchName'], 'master')
    )
  jobs:
  - deployment: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: dev
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Pay-As-You-Go Dev/Test (1b1117d0-d07b-4f24-aa35-e0e1abb131ce)'
              appType: 'webAppContainer'
              WebAppName: '$(WebAppName)'
              DockerNamespace: '$(containerRegistry)'
              DockerRepository: '$(imageRepository):$(tag)'
